import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EstruturasColecoes {
    public static void main(String[] args) {

        // 1Ô∏èARRAYS

        // ‚ûï Vantagens:
        // - Mais r√°pido e leve
        // - Pode armazenar tipos primitivos diretamente (int, double, etc)
        // ‚ûñ Desvantagens:
        // - Tamanho fixo
        // - Pouca flexibilidade

        int[] numeros = new int[3]; // array de tamanho fixo com 3 posi√ß√µes
        numeros[0] = 10;
        numeros[1] = 20;
        numeros[2] = 30;

        System.out.println("üîπ Array:");
        for (int i = 0; i < numeros.length; i++) {
            System.out.println("Posi√ß√£o " + i + ": " + numeros[i]);
        }

        // 2Ô∏è‚É£ LISTAS (ArrayList)

        // ‚ûï Vantagens:
        // - Tamanho din√¢mico (adiciona e remove facilmente)
        // - M√©todos √∫teis: add(), remove(), contains(), size(), etc.
        // ‚ûñ Desvantagens:
        // - N√£o suporta tipos primitivos diretamente (usa wrappers como Integer)
        // - Um pouco mais lenta que array em casos simples

        List<Integer> listaNumeros = new ArrayList<>();
        listaNumeros.add(10);
        listaNumeros.add(20);
        listaNumeros.add(30);
        listaNumeros.add(40);

        listaNumeros.remove(1); // remove o valor da posi√ß√£o 1 (20)

        System.out.println("\nüîπ Lista:");
        for (int i = 0; i < listaNumeros.size(); i++) {
            System.out.println("√çndice " + i + ": " + listaNumeros.get(i));
        }

        System.out.println("Cont√©m o n√∫mero 10? " + listaNumeros.contains(10));
        System.out.println("Tamanho da lista: " + listaNumeros.size());
        System.out.println("Est√° vazia? " + listaNumeros.isEmpty());

        // Pegar o primeiro e √∫ltimo item da lista
        if (!listaNumeros.isEmpty()) {
            System.out.println("Primeiro: " + listaNumeros.get(0));
            System.out.println("√öltimo: " + listaNumeros.get(listaNumeros.size() - 1));
        }

        // 3Ô∏è‚É£ MAPAS (HashMap)

        // ‚ûï Vantagens:
        // - Armazena pares "chave ‚Üí valor"
        // - Busca r√°pida por chave
        // - Ideal para representar objetos como "nome ‚Üí idade", "produto ‚Üí pre√ßo"
        // ‚ûñ Desvantagens:
        // - N√£o mant√©m ordem
        // - N√£o pode ter chaves duplicadas

        Map<String, Integer> estoque = new HashMap<>();
        estoque.put("Arroz", 10);
        estoque.put("Feij√£o", 5);
        estoque.put("Macarr√£o", 8);

        estoque.put("Feij√£o", 7); // atualiza valor do Feij√£o

        System.out.println("\nüîπ Mapa:");
        for (String produto : estoque.keySet()) {
            System.out.println(produto + " ‚Üí " + estoque.get(produto) + " unidades");
        }

        System.out.println("Tem arroz? " + estoque.containsKey("Arroz"));
        System.out.println("Quantidade de feij√£o: " + estoque.get("Feij√£o"));
        System.out.println("Mapa est√° vazio? " + estoque.isEmpty());
    }
}
